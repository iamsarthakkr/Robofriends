{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["card","name","email","id","className","alt","src","CardList","robots","Error","map","user","i","Card","key","SearchBox","searchChange","searchBox","type","placeholder","onChange","Scroll","props","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oRAiBeA,EAfF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,yBAAKC,UAAU,mDACb,yBACEC,IAAI,aACJC,IAAG,+BAA0BH,KAE/B,6BACE,4BAAKF,GACL,2BAAIC,MCaGK,EArBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACjB,IAAKA,EACF,MAAM,IAAIC,MAAM,aAGnB,OACG,6BACID,EAAOE,KAAI,SAACC,EAAMC,GAChB,OACG,kBAACC,EAAD,CACGC,IAAKF,EACLT,GAAIQ,EAAKR,GACTF,KAAMU,EAAKV,KACXC,MAAOS,EAAKT,aCDfa,G,MAbG,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,aAA8B,EAAhBC,UAC/B,OACI,6BACI,2BACIb,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUJ,OCDXK,G,MALA,SAACC,GAEb,OAAO,yBAAKlB,UAAU,UAAUkB,EAAMC,YCmB1BC,E,kDArBZ,WAAYF,GAAQ,IAAD,8BAChB,cAAMA,IACDG,MAAQ,CACVC,UAAU,GAHG,E,8DAQDC,EAAOC,GACtBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACL,yDAEAG,KAAKP,MAAMC,a,GAjBCQ,aCyDbC,E,kDAnDZ,aAAe,IAAD,8BACX,gBAkBHC,eAAiB,SAACC,GAEf,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAnB1C,EAAKZ,MAAQ,CACVjB,OAAQ,GACR2B,YAAa,IAEhBG,QAAQC,IAAI,eAND,E,gEAQO,IAAD,OAIjBC,MAAM,8CACFC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKd,SAAS,CAAEtB,OAAQoC,OAE5CN,QAAQC,IAAI,uB,+BAQL,IAAD,EAC0BV,KAAKJ,MAA7BjB,EADF,EACEA,OAAQ2B,EADV,EACUA,YACVU,EAAiBrC,EAAOsC,QAAO,SAACC,GACnC,OAAOA,EAAM9C,KACT+C,cACAC,SAASd,EAAYa,kBAM5B,OAHAV,QAAQC,IAAI,UAGc,KAAlB/B,EAAO0C,OACZ,wBAAI9C,UAAU,WAAd,WAEA,yBAAKA,UAAU,MACZ,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,aAAca,KAAKI,iBAC9B,kBAAC,EAAD,KACG,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAUzB,OAAQqC,W,GA5ClBd,a,MCKEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLW,QAAQX,MAAMA,EAAMuC,c","file":"static/js/main.752fd0ec.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst card = ({ name, email, id }) => {\r\n  return (\r\n    <div className=\"bg-light-green dib pa3 ma2 grow bw2 shadow-5 tc\">\r\n      <img\r\n        alt=\"robo_photo\"\r\n        src={`https://robohash.org/${id}`}\r\n      />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n   if (!robots) {\r\n      throw new Error('Noooooooo');\r\n   }\r\n   // returing card commpenents\r\n   return (\r\n      <div>\r\n         {robots.map((user, i) => {\r\n            return (\r\n               <Card\r\n                  key={i}\r\n                  id={user.id}\r\n                  name={user.name}\r\n                  email={user.email}\r\n               />\r\n            );\r\n         })}\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange, searchBox }) => {\r\n    return (\r\n        <div>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            ></input>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\nimport './Scroll.css';\r\n\r\nconst Scroll = (props) => {\r\n   //creating a scrollable container\r\n   return <div className='scroll'>{props.children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n   constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n         hasError: false,\r\n      };\r\n   }\r\n\r\n   //new lifecycle method\r\n   componentDidCatch(error, info) {\r\n      this.setState({ hasError: true });\r\n   }\r\n\r\n   render() {\r\n      if (this.state.hasError) {\r\n         return <h1>Ooooops. That is not good</h1>;\r\n      } else {\r\n         return this.props.children;\r\n      }\r\n   }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport './App.css';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundary from '../Components/ErrorBoundary';\r\n\r\nclass App extends Component {\r\n   constructor() {\r\n      super();\r\n      this.state = {\r\n         robots: [],\r\n         searchField: '',\r\n      };\r\n      console.log('constructor');\r\n   }\r\n   componentDidMount() {\r\n      //runs after constructor\r\n\r\n      //fetching the data from a url\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n         .then((response) => response.json())\r\n         .then((users) => this.setState({ robots: users }));\r\n\r\n      console.log('componentDidMount');\r\n   }\r\n\r\n   onSearchChange = (event) => {\r\n      //update state\r\n      this.setState({ searchField: event.target.value });\r\n   };\r\n\r\n   render() {\r\n      const { robots, searchField } = this.state;\r\n      const filteredRobots = robots.filter((robot) => {\r\n         return robot.name\r\n            .toLowerCase()\r\n            .includes(searchField.toLowerCase());\r\n      });\r\n\r\n      console.log('render');\r\n\r\n      // tackling slow fetch requests\r\n      return !robots.length === 0 ? (\r\n         <h1 className='loading'>Loading</h1>\r\n      ) : (\r\n         <div className='tc'>\r\n            <h1 className='f1'>RoboFriends</h1>\r\n            <SearchBox searchChange={this.onSearchChange} />\r\n            <Scroll>\r\n               <ErrorBoundary>\r\n                  <CardList robots={filteredRobots} />\r\n               </ErrorBoundary>\r\n            </Scroll>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './Containers/App';\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n//importing tacyons\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}